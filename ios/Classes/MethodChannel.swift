// Autogenerated from Pigeon (v7.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: FlutterError) -> [Any?] {
  return [
    error.code,
    error.message,
    error.details
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct CreationParams {
  var position: LatLng
  var zoom: Double

  static func fromList(_ list: [Any?]) -> CreationParams? {
    let position = LatLng.fromList(list[0] as! [Any?])!
    let zoom = list[1] as! Double

    return CreationParams(
      position: position,
      zoom: zoom
    )
  }
  func toList() -> [Any?] {
    return [
      position.toList(),
      zoom,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct LatLng {
  var latitude: Double
  var longitude: Double

  static func fromList(_ list: [Any?]) -> LatLng? {
    let latitude = list[0] as! Double
    let longitude = list[1] as! Double

    return LatLng(
      latitude: latitude,
      longitude: longitude
    )
  }
  func toList() -> [Any?] {
    return [
      latitude,
      longitude,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MarkerBitmap {
  /// Байты изображения
  var bytes: FlutterStandardTypedData
  /// Ширина изображения,
  /// если null, используется значение по умолчанию,
  /// которое зависит от нативной реализации
  var width: Double? = nil
  /// Высота изображения,
  /// если null, используется значение по умолчанию,
  /// которое зависит от нативной реализации
  var height: Double? = nil

  static func fromList(_ list: [Any?]) -> MarkerBitmap? {
    let bytes = list[0] as! FlutterStandardTypedData
    let width = list[1] as? Double 
    let height = list[2] as? Double 

    return MarkerBitmap(
      bytes: bytes,
      width: width,
      height: height
    )
  }
  func toList() -> [Any?] {
    return [
      bytes,
      width,
      height,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Marker {
  /// Уникальный идентификатор маркера
  var markerId: MarkerId
  /// Изображение маркера
  /// Используется нативная реализация дефолтного маркера,
  /// если null
  var bitmap: MarkerBitmap? = nil
  /// Позиция маркера
  var position: LatLng
  /// Текст под маркером
  var infoText: String? = nil

  static func fromList(_ list: [Any?]) -> Marker? {
    let markerId = MarkerId.fromList(list[0] as! [Any?])!
    var bitmap: MarkerBitmap? = nil
    if let bitmapList = list[1] as? [Any?] {
      bitmap = MarkerBitmap.fromList(bitmapList)
    }
    let position = LatLng.fromList(list[2] as! [Any?])!
    let infoText = list[3] as? String 

    return Marker(
      markerId: markerId,
      bitmap: bitmap,
      position: position,
      infoText: infoText
    )
  }
  func toList() -> [Any?] {
    return [
      markerId.toList(),
      bitmap?.toList(),
      position.toList(),
      infoText,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MarkerId {
  var value: String

  static func fromList(_ list: [Any?]) -> MarkerId? {
    let value = list[0] as! String

    return MarkerId(
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      value,
    ]
  }
}

private class PluginHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return LatLng.fromList(self.readValue() as! [Any])
      case 129:
        return Marker.fromList(self.readValue() as! [Any])
      case 130:
        return MarkerBitmap.fromList(self.readValue() as! [Any])
      case 131:
        return MarkerId.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class PluginHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? LatLng {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? Marker {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? MarkerBitmap {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? MarkerId {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PluginHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PluginHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PluginHostApiCodecWriter(data: data)
  }
}

class PluginHostApiCodec: FlutterStandardMessageCodec {
  static let shared = PluginHostApiCodec(readerWriter: PluginHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PluginHostApi {
  func asy(msg: LatLng, completion: @escaping (LatLng) -> Void)
  func m(msg: Marker, completion: @escaping (Marker) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PluginHostApiSetup {
  /// The codec used by PluginHostApi.
  static var codec: FlutterStandardMessageCodec { PluginHostApiCodec.shared }
  /// Sets up an instance of `PluginHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PluginHostApi?, id: Int64?) {
    let asyChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id ?? 0).asy", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      asyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! LatLng
        api.asy(msg: msgArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      asyChannel.setMessageHandler(nil)
    }
    let syChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id ?? 0).m", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! Marker
        api.m(msg: msgArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      mChannel.setMessageHandler(nil)
    }
  }
}
private class PluginFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return LatLng.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class PluginFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? LatLng {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PluginFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PluginFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PluginFlutterApiCodecWriter(data: data)
  }
}

class PluginFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = PluginFlutterApiCodec(readerWriter: PluginFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class PluginFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  private let id: Int64?
  init(binaryMessenger: FlutterBinaryMessenger, id: Int64?){
    self.binaryMessenger = binaryMessenger
    self.id = id
  }
  var codec: FlutterStandardMessageCodec {
    return PluginFlutterApiCodec.shared
  }
  func asy(msg msgArg: LatLng, completion: @escaping (LatLng) -> Void) {
    let channel = FlutterBasicMessageChannel(name: "pro.flown.PluginFlutterApi_\(id ?? 0).asy", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([msgArg] as [Any?]) { response in
      let result = response as! LatLng
      completion(result)
    }
  }
  func sy(msg msgArg: LatLng, completion: @escaping (LatLng) -> Void) {
    let channel = FlutterBasicMessageChannel(name: "pro.flown.PluginFlutterApi_\(id ?? 0).sy", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([msgArg] as [Any?]) { response in
      let result = response as! LatLng
      completion(result)
    }
  }
}
