// Autogenerated from Pigeon (v7.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package pro.flown.dgis_maps_flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

/**
 * Состояние камеры
 * https://docs.2gis.com/ru/android/sdk/reference/5.1/ru.dgis.sdk.map.CameraState
 */
enum class CameraState(val raw: Int) {
  /** Камера управляется пользователем. */
  BUSY(0),
  /** Eсть активный перелёт. */
  FLY(1),
  /** Камера в режиме слежения за позицией. */
  FOLLOWPOSITION(2),
  /** Камера не управляется пользователем и нет активных перелётов. */
  FREE(3);

  companion object {
    fun ofRaw(raw: Int): CameraState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Тип анимации при перемещении камеры
 * https://docs.2gis.com/ru/android/sdk/reference/5.1/ru.dgis.sdk.map.CameraAnimationType
 */
enum class CameraAnimationType(val raw: Int) {
  /** Тип перелёта выбирается в зависимости от расстояния между начальной и конечной позициями */
  DEF(0),
  /** Линейное изменение параметров позиции камеры */
  LINEAR(1),
  /**
   * Zoom изменяется таким образом, чтобы постараться в какой-то момент перелёта отобразить начальную и конечную позиции.
   * Позиции могут быть не отображены, если текущие ограничения (см. ICamera::zoom_restrictions()) не позволяют установить столь малый zoom.
   */
  SHOWBOTHPOSITIONS(2);

  companion object {
    fun ofRaw(raw: Int): CameraAnimationType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CreationParams (
  val position: LatLng,
  val zoom: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CreationParams {
      val position = LatLng.fromList(list[0] as List<Any?>)
      val zoom = list[1] as Double
      return CreationParams(position, zoom)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      position?.toList(),
      zoom,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LatLng (
  val latitude: Double,
  val longitude: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): LatLng {
      val latitude = list[0] as Double
      val longitude = list[1] as Double
      return LatLng(latitude, longitude)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      latitude,
      longitude,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MarkerBitmap (
  /** Байты изображения */
  val bytes: ByteArray,
  /**
   * Ширина изображения,
   * если null, используется значение по умолчанию,
   * которое зависит от нативной реализации
   */
  val width: Double? = null,
  /**
   * Высота изображения,
   * если null, используется значение по умолчанию,
   * которое зависит от нативной реализации
   */
  val height: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MarkerBitmap {
      val bytes = list[0] as ByteArray
      val width = list[1] as? Double
      val height = list[2] as? Double
      return MarkerBitmap(bytes, width, height)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      bytes,
      width,
      height,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Marker (
  /** Уникальный идентификатор маркера */
  val markerId: MarkerId,
  /**
   * Изображение маркера
   * Используется нативная реализация дефолтного маркера,
   * если null
   */
  val bitmap: MarkerBitmap? = null,
  /** Позиция маркера */
  val position: LatLng,
  /** Текст под маркером */
  val infoText: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Marker {
      val markerId = MarkerId.fromList(list[0] as List<Any?>)
      val bitmap: MarkerBitmap? = (list[1] as? List<Any?>)?.let {
        MarkerBitmap.fromList(it)
      }
      val position = LatLng.fromList(list[2] as List<Any?>)
      val infoText = list[3] as? String
      return Marker(markerId, bitmap, position, infoText)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      markerId?.toList(),
      bitmap?.toList(),
      position?.toList(),
      infoText,
    )
  }
}

/**
 * Позиция камеры
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class CameraPosition (
  /** Азимут камеры в градусах */
  val bearing: Double,
  /** Центр камеры */
  val target: LatLng,
  /** Угол наклона камеры (в градусах) */
  val tilt: Double,
  /** Зум камеры */
  val zoom: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CameraPosition {
      val bearing = list[0] as Double
      val target = LatLng.fromList(list[1] as List<Any?>)
      val tilt = list[2] as Double
      val zoom = list[3] as Double
      return CameraPosition(bearing, target, tilt, zoom)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      bearing,
      target?.toList(),
      tilt,
      zoom,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MarkerId (
  val value: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MarkerId {
      val value = list[0] as String
      return MarkerId(value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      value,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object PluginHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraPosition.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LatLng.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Marker.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MarkerBitmap.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MarkerId.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CameraPosition -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is LatLng -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is Marker -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MarkerBitmap -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MarkerId -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PluginHostApi {
  fun asy(msg: LatLng, callback: (LatLng) -> Unit)
  fun m(msg: Marker, callback: () -> Unit)
  /**
   * Получение текущей позиции камеры
   *
   * Возвращает [CameraPosition]
   * Позицию камеры в текущий момент времени
   */
  fun getCameraPosition(callback: (CameraPosition) -> Unit)
  /**
   * Перемещение камеры к заданной позиции [CameraPosition]
   * [duration] - длительность анимации в миллисекундах,
   * если не указана, используется нативное значение
   * [cameraAnimationType] - тип анимации
   */
  fun moveCamera(cameraPosition: CameraPosition, duration: Long?, cameraAnimationType: CameraAnimationType, callback: () -> Unit)

  companion object {
    /** The codec used by PluginHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      PluginHostApiCodec
    }
    /** Sets up an instance of `PluginHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: PluginHostApi?, id: Int?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "pro.flown.PluginHostApi_$id.asy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val msgArg = args[0] as LatLng
              api.asy(msgArg) {
                reply.reply(wrapResult(it))
              }
            } catch (exception: Error) {
              wrapped = wrapError(exception)
              reply.reply(wrapped)
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "pro.flown.PluginHostApi_$id.m", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val msgArg = args[0] as Marker
              api.m(msgArg) {
                reply.reply(wrapResult(null))
              }
            } catch (exception: Error) {
              wrapped = wrapError(exception)
              reply.reply(wrapped)
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "pro.flown.PluginHostApi_$id.getCameraPosition", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped = listOf<Any?>()
            try {
              api.getCameraPosition() {
                reply.reply(wrapResult(it))
              }
            } catch (exception: Error) {
              wrapped = wrapError(exception)
              reply.reply(wrapped)
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "pro.flown.PluginHostApi_$id.moveCamera", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            var wrapped = listOf<Any?>()
            try {
              val args = message as List<Any?>
              val cameraPositionArg = args[0] as CameraPosition
              val durationArg = args[1].let { if (it is Int) it.toLong() else it as? Long }
              val cameraAnimationTypeArg = CameraAnimationType.ofRaw(args[2] as Int)!!
              api.moveCamera(cameraPositionArg, durationArg, cameraAnimationTypeArg) {
                reply.reply(wrapResult(null))
              }
            } catch (exception: Error) {
              wrapped = wrapError(exception)
              reply.reply(wrapped)
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class PluginFlutterApi(private val binaryMessenger: BinaryMessenger, private val id: Int?) {
  companion object {
    /** The codec used by PluginFlutterApi. */
    private val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  /**
   * Коллбэк на изменение состояния камеры
   * [cameraState] - индекс в перечислении [CameraState]
   * TODO(kit): Изменить на enum после фикса
   * https://github.com/flutter/flutter/issues/87307
   */
  fun onCameraStateChanged(cameraStateArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "pro.flown.PluginFlutterApi_$id.onCameraStateChanged", codec)
    channel.send(listOf(cameraStateArg)) {
      callback()
    }
  }
}
