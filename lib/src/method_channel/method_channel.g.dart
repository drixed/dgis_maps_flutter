// Autogenerated from Pigeon (v7.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// Состояние камеры
/// https://docs.2gis.com/ru/android/sdk/reference/5.1/ru.dgis.sdk.map.CameraState
enum CameraState {
  /// Камера управляется пользователем.
  busy,
  /// Eсть активный перелёт.
  fly,
  /// Камера в режиме слежения за позицией.
  followPosition,
  /// Камера не управляется пользователем и нет активных перелётов.
  free,
}

/// Тип анимации при перемещении камеры
/// https://docs.2gis.com/ru/android/sdk/reference/5.1/ru.dgis.sdk.map.CameraAnimationType
enum CameraAnimationType {
  /// Тип перелёта выбирается в зависимости от расстояния между начальной и конечной позициями
  def,
  /// Линейное изменение параметров позиции камеры
  linear,
  /// Zoom изменяется таким образом, чтобы постараться в какой-то момент перелёта отобразить начальную и конечную позиции.
  /// Позиции могут быть не отображены, если текущие ограничения (см. ICamera::zoom_restrictions()) не позволяют установить столь малый zoom.
  showBothPositions,
}

class CreationParams {
  CreationParams({
    required this.position,
    required this.zoom,
  });

  LatLng position;

  double zoom;

  Object encode() {
    return <Object?>[
      position.encode(),
      zoom,
    ];
  }

  static CreationParams decode(Object result) {
    result as List<Object?>;
    return CreationParams(
      position: LatLng.decode(result[0]! as List<Object?>),
      zoom: result[1]! as double,
    );
  }
}

class LatLng {
  LatLng({
    required this.latitude,
    required this.longitude,
  });

  double latitude;

  double longitude;

  Object encode() {
    return <Object?>[
      latitude,
      longitude,
    ];
  }

  static LatLng decode(Object result) {
    result as List<Object?>;
    return LatLng(
      latitude: result[0]! as double,
      longitude: result[1]! as double,
    );
  }
}

class MarkerBitmap {
  MarkerBitmap({
    required this.bytes,
    this.width,
    this.height,
  });

  /// Байты изображения
  Uint8List bytes;

  /// Ширина изображения,
  /// если null, используется значение по умолчанию,
  /// которое зависит от нативной реализации
  double? width;

  /// Высота изображения,
  /// если null, используется значение по умолчанию,
  /// которое зависит от нативной реализации
  double? height;

  Object encode() {
    return <Object?>[
      bytes,
      width,
      height,
    ];
  }

  static MarkerBitmap decode(Object result) {
    result as List<Object?>;
    return MarkerBitmap(
      bytes: result[0]! as Uint8List,
      width: result[1] as double?,
      height: result[2] as double?,
    );
  }
}

class Marker {
  Marker({
    required this.markerId,
    this.bitmap,
    required this.position,
    this.infoText,
  });

  /// Уникальный идентификатор маркера
  MarkerId markerId;

  /// Изображение маркера
  /// Используется нативная реализация дефолтного маркера,
  /// если null
  MarkerBitmap? bitmap;

  /// Позиция маркера
  LatLng position;

  /// Текст под маркером
  String? infoText;

  Object encode() {
    return <Object?>[
      markerId.encode(),
      bitmap?.encode(),
      position.encode(),
      infoText,
    ];
  }

  static Marker decode(Object result) {
    result as List<Object?>;
    return Marker(
      markerId: MarkerId.decode(result[0]! as List<Object?>),
      bitmap: result[1] != null
          ? MarkerBitmap.decode(result[1]! as List<Object?>)
          : null,
      position: LatLng.decode(result[2]! as List<Object?>),
      infoText: result[3] as String?,
    );
  }
}

/// Позиция камеры
class CameraPosition {
  CameraPosition({
    required this.bearing,
    required this.target,
    required this.tilt,
    required this.zoom,
  });

  /// Азимут камеры в градусах
  double bearing;

  /// Центр камеры
  LatLng target;

  /// Угол наклона камеры (в градусах)
  double tilt;

  /// Зум камеры
  double zoom;

  Object encode() {
    return <Object?>[
      bearing,
      target.encode(),
      tilt,
      zoom,
    ];
  }

  static CameraPosition decode(Object result) {
    result as List<Object?>;
    return CameraPosition(
      bearing: result[0]! as double,
      target: LatLng.decode(result[1]! as List<Object?>),
      tilt: result[2]! as double,
      zoom: result[3]! as double,
    );
  }
}

class MarkerId {
  MarkerId({
    required this.value,
  });

  String value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static MarkerId decode(Object result) {
    result as List<Object?>;
    return MarkerId(
      value: result[0]! as String,
    );
  }
}

class _PluginHostApiCodec extends StandardMessageCodec {
  const _PluginHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CameraPosition) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is LatLng) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is Marker) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MarkerBitmap) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is MarkerId) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return CameraPosition.decode(readValue(buffer)!);
      
      case 129:       
        return LatLng.decode(readValue(buffer)!);
      
      case 130:       
        return Marker.decode(readValue(buffer)!);
      
      case 131:       
        return MarkerBitmap.decode(readValue(buffer)!);
      
      case 132:       
        return MarkerId.decode(readValue(buffer)!);
      
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PluginHostApi {
  /// Constructor for [PluginHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PluginHostApi({BinaryMessenger? binaryMessenger, this.id})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;
  final int? id;

  static const MessageCodec<Object?> codec = _PluginHostApiCodec();

  Future<LatLng> asy(LatLng arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'pro.flown.PluginHostApi_$id.asy', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as LatLng?)!;
    }
  }

  Future<void> m(Marker arg_msg) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'pro.flown.PluginHostApi_$id.m', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_msg]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Получение текущей позиции камеры
  ///
  /// Возвращает [CameraPosition]
  /// Позицию камеры в текущий момент времени
  Future<CameraPosition> getCameraPosition() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'pro.flown.PluginHostApi_$id.getCameraPosition', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as CameraPosition?)!;
    }
  }

  /// Перемещение камеры к заданной позиции [CameraPosition]
  /// [duration] - длительность анимации в миллисекундах,
  /// если не указана, используется нативное значение
  /// [cameraAnimationType] - тип анимации
  Future<void> moveCamera(CameraPosition arg_cameraPosition, int? arg_duration, CameraAnimationType arg_cameraAnimationType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'pro.flown.PluginHostApi_$id.moveCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_cameraPosition, arg_duration, arg_cameraAnimationType.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class PluginFlutterApi {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  /// Коллбэк на изменение состояния камеры
  /// [cameraState] - индекс в перечислении [CameraState]
  /// TODO(kit): Изменить на enum после фикса
  /// https://github.com/flutter/flutter/issues/87307
  void onCameraStateChanged(int cameraState);

  static void setup(PluginFlutterApi? api, {BinaryMessenger? binaryMessenger, int? id}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'pro.flown.PluginFlutterApi_$id.onCameraStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for pro.flown.PluginFlutterApi_$id.onCameraStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_cameraState = (args[0] as int?);
          assert(arg_cameraState != null,
              'Argument for pro.flown.PluginFlutterApi_$id.onCameraStateChanged was null, expected non-null int.');
          api.onCameraStateChanged(arg_cameraState!);
          return;
        });
      }
    }
  }
}
